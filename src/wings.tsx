/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 --types wings-rigged-animated-2.glb 
*/

import * as THREE from "three";
import React, { useEffect, useMemo, useRef } from "react";
import { useGLTF, useAnimations, Instance, Instances } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { SkeletonUtils } from "three-stdlib";
import { useGraph } from "@react-three/fiber";

type GLTFResult = GLTF & {
  nodes: {
    wing: THREE.SkinnedMesh;
    Bone: THREE.Bone;
    target: THREE.Bone;
  };
  materials: {};
  animations: GLTFAction[];
};

type ActionName = "flap";
interface GLTFAction extends THREE.AnimationClip {
  name: ActionName;
}

type ContextType = Record<
  string,
  React.ForwardRefExoticComponent<
    JSX.IntrinsicElements["skinnedMesh"] | JSX.IntrinsicElements["bone"]
  >
>;

useGLTF.preload("/wings-ok-rigged-animated-9-pole-targets.glb");

type WingsProps = JSX.IntrinsicElements["group"] & {
  animationSpeed?: number;
  animationStartTime?: number;
};

export function Wings({
  animationSpeed = 1,
  // seconds
  animationStartTime = 0,
  ...props
}: WingsProps) {
  const group = useRef<THREE.Group>(null);
  const { scene, animations } = useGLTF(
    "/wings-ok-rigged-animated-9-pole-targets.glb"
  ) as GLTFResult;

  const { actions, names } = useAnimations(animations, group);
  // Skinned meshes cannot be re-used in Three without cloning them
  const clone = useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { nodes } = useGraph(clone);

  useEffect(() => {
    if (actions["flap"]) {
      const action = actions["flap"];
      action.setEffectiveTimeScale(animationSpeed);
      action.time = animationStartTime;
      action.play();
    }
  }, [actions, names, animationSpeed, animationStartTime]);

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="Armature">
          <primitive object={nodes.Armature} />
          <primitive object={nodes.target_L} />
          <primitive object={nodes.target_R} />
          <skinnedMesh
            name="wing"
            geometry={(nodes.wing as THREE.SkinnedMesh).geometry}
            material={(nodes.wing as THREE.SkinnedMesh).material}
            skeleton={(nodes.wing as THREE.SkinnedMesh).skeleton}
          ></skinnedMesh>
        </group>
      </group>
    </group>
  );
}
