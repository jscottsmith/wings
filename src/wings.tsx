/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 --types wings-rigged-animated-2.glb 
*/

import * as THREE from "three";
import React, { useEffect, useRef } from "react";
import { useGLTF, useAnimations, Instance, Instances } from "@react-three/drei";
import { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
  nodes: {
    wing: THREE.SkinnedMesh;
    Bone: THREE.Bone;
    target: THREE.Bone;
  };
  materials: {};
  animations: GLTFAction[];
};

type ActionName = "flap";
interface GLTFAction extends THREE.AnimationClip {
  name: ActionName;
}
type ContextType = Record<
  string,
  React.ForwardRefExoticComponent<
    JSX.IntrinsicElements["skinnedMesh"] | JSX.IntrinsicElements["bone"]
  >
>;

export function Wings(props: JSX.IntrinsicElements["group"]) {
  const group = useRef<THREE.Group>();
  const { nodes, materials, animations } = useGLTF(
    "/wings-rigged-animated-2.glb"
  ) as GLTFResult;

  const { actions, names } = useAnimations(animations, group);

  useEffect(() => {
    if (actions["flap"]) {
      actions["flap"].play();
    }
  }, [actions, names]);

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="Armature" scale={0.031}>
          <primitive object={nodes.Bone} />
          <primitive object={nodes.target} />
          <skinnedMesh
            name="wing"
            geometry={nodes.wing.geometry}
            // material={nodes.wing.material}
            skeleton={nodes.wing.skeleton}
          >
            <meshStandardMaterial />
          </skinnedMesh>
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("/wings-rigged-animated-2.glb");
