/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 --types ok.glb 
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
  nodes: {
    OK: THREE.Mesh;
    OK_1: THREE.Mesh;
  };
  materials: {
    face: THREE.MeshStandardMaterial;
    extrude: THREE.MeshStandardMaterial;
  };
  animations: GLTFAction[];
};

type ContextType = Record<
  string,
  React.ForwardRefExoticComponent<JSX.IntrinsicElements["mesh"]>
>;

export function Ok(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF("/ok.glb") as GLTFResult;
  return (
    <group {...props} dispose={null}>
      <mesh geometry={nodes.OK.geometry} material={materials.face}>
        <meshStandardMaterial
          color="#faef9b"
          roughness={0.6}
          emissive="#332466"
          emissiveIntensity={0.1}
        />
      </mesh>
      <mesh geometry={nodes.OK_1.geometry} material={materials.extrude}>
        <meshStandardMaterial
          color="#8a7db3"
          roughness={0.6}
          emissive="#332466"
          emissiveIntensity={0.1}
        />
      </mesh>
    </group>
  );
}

useGLTF.preload("/ok.glb");
